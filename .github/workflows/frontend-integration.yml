# This is a basic workflow to help you get started with Actions

name: Frontend Integration

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - master
    paths:
      - PreciseAlloy.Frontend/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  BASE_BRANCH: master
  RELEASE_BRANCH: fe-release

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    timeout-minutes: 5
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Base 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          submodules: recursive
          ref: ${{ env.BASE_BRANCH }}

      - name: Create git branch
        run: |
          git config --global user.email "build-service@eshn.dev"
          git config --global user.name "Build Service"

      - name: Bun Setup 🛎️
        uses: oven-sh/setup-bun@v2

      - name: Bun Install and Inte 🛎️
        run: |
          bun install
          bun run inte
          git checkout -- .
        working-directory: PreciseAlloy.Frontend

      - name: Create release package
        run: |
          if [[ -n $(git status --porcelain) ]];
          then
            git add .
            git commit -m "Create release package"
            git push origin HEAD:$RELEASE_BRANCH -f
            echo "HAS_NEW_COMMIT=true" >> $GITHUB_ENV
          fi

      - name: PR to ${{ env.BASE_BRANCH }}
        if: env.HAS_NEW_COMMIT == 'true'
        run: |
          echo $TOKEN | gh auth login --with-token

          PR_COUNT=$(gh pr list \
            --base $BASE_BRANCH \
            --head $RELEASE_BRANCH \
            --state open \
            --json title \
            --jq length)

          if [ "$PR_COUNT" -eq "0" ]; then
            echo "Creating PR to $BASE_BRANCH"
            gh pr create \
              --base $BASE_BRANCH \
              --head $RELEASE_BRANCH \
              --title 'PR to ${{ env.BASE_BRANCH }}' \
              --body 'Created by Github action'
          else
            echo "PR already exists"
          fi
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
